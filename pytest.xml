<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="2" hostname="benlaptop" name="pytest" skipped="0" tests="2" time="1.557" timestamp="2020-04-02T13:47:41.506032"><testcase classname="cv19index.test_predict" file="cv19index/test_predict.py" line="7" name="test_do_run_claims" time="0.129"><failure message="NameError: name &apos;cod&apos; is not defined">def test_do_run_claims():
        do_run_claims(&apos;examples/data/demographics.csv&apos;,
                      &apos;examples/data/claims.xls&apos;,
                      &quot;cv19index/resources/xgboost/model.pickle&quot;,
                      f&apos;{datetime.now().strftime(&quot;%Y-%M-%dT%H:%m:%S&quot;)}-prediction_summary.csv&apos;,
                      &apos;xgboost&apos;,
&gt;                     pd.to_datetime(&apos;2018-12-01&apos;))

cv19index/test_predict.py:14: 

cv19index/predict.py:417: in do_run_claims
    input_df = preprocess_xgboost(claim_df, demo_df, asOfDate)
cv19index/preprocess.py:89: in preprocess_xgboost
    claim_df[column] = claim_df[column].apply(lambda x: cleanICD10Syntax(str(x)))
../../../.local/lib/python3.6/site-packages/pandas/core/series.py:3194: in apply
    mapped = lib.map_infer(values, f, convert=convert_dtype)
pandas/_libs/src/inference.pyx:1472: in pandas._libs.lib.map_infer
    ???
cv19index/preprocess.py:89: in &lt;lambda&gt;
    claim_df[column] = claim_df[column].apply(lambda x: cleanICD10Syntax(str(x)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

code = &apos;J40&apos;

    def cleanICD10Syntax(code):
        if len(code) &gt; 3 and &apos;.&apos; not in code:
            return code[:3] + &apos;.&apos; + code[3:]
        else:
&gt;           cod
E           NameError: name &apos;cod&apos; is not defined

cv19index/preprocess.py:53: NameError</failure></testcase><testcase classname="cv19index.test_predict" file="cv19index/test_predict.py" line="16" name="test_do_run" time="0.106"><failure message="NameError: name &apos;cod&apos; is not defined">def test_do_run():
        asOfDate = pd.to_datetime(&apos;2018-12-01&apos;)
        demo_df = read_demographics(&apos;examples/data/demographics.csv&apos;)
        claim_df = read_claim(&apos;examples/data/claims.xls&apos;)
    
&gt;       result_df = preprocess_xgboost(claim_df, demo_df, asOfDate)

cv19index/test_predict.py:22: 

cv19index/preprocess.py:89: in preprocess_xgboost
    claim_df[column] = claim_df[column].apply(lambda x: cleanICD10Syntax(str(x)))
../../../.local/lib/python3.6/site-packages/pandas/core/series.py:3194: in apply
    mapped = lib.map_infer(values, f, convert=convert_dtype)
pandas/_libs/src/inference.pyx:1472: in pandas._libs.lib.map_infer
    ???
cv19index/preprocess.py:89: in &lt;lambda&gt;
    claim_df[column] = claim_df[column].apply(lambda x: cleanICD10Syntax(str(x)))


code = &apos;J40&apos;

    def cleanICD10Syntax(code):
        if len(code) &gt; 3 and &apos;.&apos; not in code:
            return code[:3] + &apos;.&apos; + code[3:]
        else:
&gt;           cod
E           NameError: name &apos;cod&apos; is not defined

cv19index/preprocess.py:53: NameError</failure></testcase></testsuite></testsuites>